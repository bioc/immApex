% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sequenceDecoder.R
\name{sequenceDecoder}
\alias{sequenceDecoder}
\title{One Hot Decoder from One Hot Encoded Matrix or 3D Array}
\usage{
sequenceDecoder(
  sequence.matrix,
  encoder = "onehotEncoder",
  aa.method.to.use = NULL,
  call.threshold = 0.5,
  sequence.dictionary = amino.acids,
  padding.symbol = ".",
  remove.padding = TRUE
)
}
\arguments{
\item{sequence.matrix}{The encoded sequences to decode in an array or matrix}

\item{encoder}{The method to prepare the sequencing information - 
"onehotEncoder" or "propertyEncoder"}

\item{aa.method.to.use}{The method or approach to use for the conversion:
\itemize{
  \item{Individual sets: atchleyFactors, crucianiProperties, FASGAI, kideraFactors, MSWHIM,
  ProtFP, stScales, tScales, VHSE, zScales"}
  \item{Multiple Sets: c("atchleyFactors", "VHSE") }
}}

\item{call.threshold}{The relative strictness of sequence calling with higher values being more
stringent}

\item{sequence.dictionary}{The letters to use in sequence generation 
(default are all amino acids)}

\item{padding.symbol}{Symbol to use for padding at the end of sequences}

\item{remove.padding}{Remove the additional symbol from the end of decoded sequences}
}
\value{
Decoded amino acid or nucleotide sequences
}
\description{
Use this to transform one hot encoded sequences back
into amino acid or nucleotide sequences.
}
\examples{
new.sequences <- generateSequences(prefix.motif = "CAS",
                                   suffix.motif = "YF",
                                   number.of.sequences = 100,
                                   min.length = 8,
                                   max.length = 16)
if(reticulate::py_module_available("numpy")) {                         
sequence.matrix <- onehotEncoder(new.sequences, 
                                 convert.to.matrix = TRUE)
                                 
decoded.sequences <- sequenceDecoder(sequence.matrix,
                                     padding.symbol = ".")
}

}
